import { WalletBotService } from './wallet-bot.service';
import { Action, InjectBot, On, Start, Update } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import {
  actionButtons,
  expensesButtons,
  expensesCategoriesButtons,
  incomeCategoriesButtons,
} from './wallet-bot-buttons';
import { StateStageEnum } from '../enums/state-stage.enum';
import { Context } from '../utils/types';
import { ExpensesCategoriesEnum } from '../enums/expenses-categories.enum';
import { IncomeCategoriesEnum } from '../enums/income-categories.enum';

@Update()
export class WalletBotUpdate {
  constructor(
    @InjectBot()
    private readonly bot: Telegraf<Context>,

    private readonly walletBotService: WalletBotService,
  ) {}

  @Start()
  async startCommand(ctx: Context) {
    ctx.session.stage = null;
    ctx.session.transaction = {};
    await ctx.reply('Hello', actionButtons());
  }

  // Handler for text messages
  @On('text')
  async command(ctx: Context) {
    // console.log(ctx.message);
    if (
      'text' in ctx.message &&
      (ctx.message.text === '–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó' || ctx.message.text === '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    ) {
      ctx.session.stage = null;
      ctx.session.transaction = {};
      const text: string = ctx.message.text;
      switch (text) {
        case '–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó':
          await ctx.reply(
            '–°–ø–æ–¥—ñ–≤–∞—é—Å—å —Ç–∏ –∑–∞—Ä–æ–±–∏–≤, –∞ –Ω–µ –ø—Ä–æ—ó–≤ —è–∫ –∑–∞–≤–∂–¥–∏',
            expensesButtons(),
          );
          break;
        case '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
          await ctx.reply('You clicked on –ó–∞—Ä–æ–±–∏–≤ üí∏');
          break;
        default:
          await ctx.reply('You sent some text');
          break;
      }
    } else if ('text' in ctx.message && ctx.session.stage) {
      switch (ctx.session.stage) {
        case StateStageEnum.EXPENSES_DESCRIPTION:
          ctx.session.transaction.description = ctx.message.text;
          ctx.session.stage = StateStageEnum.EXPENSES_AMOUNT;
          await ctx.reply('–°–∫—ñ–ª—å–∫–∏ –Ω–∞ —Ü–µ–π —Ä–∞–∑?');
          break;
        case StateStageEnum.EXPENSES_AMOUNT:
          ctx.session.transaction.amount = Number(ctx.message.text);
          ctx.session.stage = StateStageEnum.EXPENSES_CATEGORY;
          await ctx.reply(
            '–Ü –∫—É–¥–∏ –º–µ–Ω—ñ —Ü–µ –≤—Å–µ –∑–∞–ø–∏—Å–∞—Ç–∏?',
            expensesCategoriesButtons(),
          );
          break;
        case StateStageEnum.INCOME_DESCRIPTION:
          ctx.session.transaction.description = ctx.message.text;
          ctx.session.stage = StateStageEnum.INCOME_AMOUNT;
          await ctx.reply('–®–∏–∫–∞—Ä–¥–æc! –ê —Å–∫—ñ–ª—å–∫–∏, –∫–æ—Ç–∏–∫?');
          break;
        case StateStageEnum.INCOME_AMOUNT:
          ctx.session.transaction.amount = Number(ctx.message.text);
          ctx.session.stage = StateStageEnum.INCOME_CATEGORY;
          await ctx.reply(
            '–¢—é—é—é—é, —ñ –∑–∞—Ä–∞–¥–∏ —Ü—å–æ–≥–æ —è —Å–≤–æ—ó –∫—ñ–ª–æ–±–∞–π—Ç–∏ –Ω–∞–ø—Ä—è–≥–∞—é? –õ–∞–¥–Ω–æ, –∑–≤—ñ–¥–∫–∏ –≥—Ä–æ—à—ñ, –õ—î–±–æ–≤—Å—å–∫—ñ?',
            incomeCategoriesButtons(),
          );
      }
    }
  }

  // Handler for expenses flow button
  @Action('expenses')
  async expensesAction(ctx: Context) {
    console.log('ctx.state.stage before changing', ctx.state.stage);
    ctx.session.stage = StateStageEnum.EXPENSES_DESCRIPTION;
    ctx.session.transaction = {};
    console.log('ctx.state.stage after changing', ctx.state.stage);
    await ctx.reply('–ù–∞ —â–æ –≤–∏—Ç—Ä–∞—Ç–∏–≤, –∫–æ—Ç–∏–∫?');
  }

  @Action('income')
  async incomeAction(ctx: Context) {
    ctx.session.stage = StateStageEnum.INCOME_DESCRIPTION;
    ctx.session.transaction = {};
    await ctx.reply('–û—Ö—Ö—Ö, –¥–∞–≤–Ω–æ –≤–∂–µ —Ü—å–æ–≥–æ —á–µ–∫–∞–≤! –ó–≤—ñ–¥–∫–∏ –≥—Ä–æ—à–µ–Ω—è—Ç–∞?');
  }

  // Handler for categories buttons
  @Action([
    ExpensesCategoriesEnum.FOOD,
    ExpensesCategoriesEnum.CLOTHES,
    ExpensesCategoriesEnum.TRANSPORT,
    ExpensesCategoriesEnum.ENTERTAINMENT,
    ExpensesCategoriesEnum.HOME,
    ExpensesCategoriesEnum.CHILDREN,
    ExpensesCategoriesEnum.HEALTH,
    ExpensesCategoriesEnum.CAR,
    ExpensesCategoriesEnum.SUBSCRIPTIONS,
    ExpensesCategoriesEnum.OTHER,
  ])
  async categoriesAction(ctx: Context) {
    ctx.session.transaction.category = (ctx.callbackQuery as any).data;
    await this.walletBotService.createExpensesTransaction(
      ctx.session.transaction,
      ctx.from,
    );
    ctx.session.transaction = {};
    ctx.session.stage = null;
    await ctx.reply('–Ø –≤—Å—å–æ –∑–∞–ø–∏—Å–∞–≤, —Ç—Ä–∞–Ω–∂–∏—Ä–æ!');
  }

  // Handler for categories buttons
  @Action([
    IncomeCategoriesEnum.SALARY,
    IncomeCategoriesEnum.GIFTS,
    IncomeCategoriesEnum.DEPOSITS,
    IncomeCategoriesEnum.OTHER,
    IncomeCategoriesEnum.LOANS,
    IncomeCategoriesEnum.INVESTMENTS,
  ])
  async incomeCategoriesAction(ctx: Context) {
    ctx.session.transaction.category = (ctx.callbackQuery as any).data;
    await this.walletBotService.createIncomeTransaction(
      ctx.session.transaction,
      ctx.from,
    );
    ctx.session.transaction = {};
    ctx.session.stage = null;
    await ctx.reply('–Ø –≤—Å—å–æ –∑–∞–ø–∏—Å–∞–≤, —Ç—Ä–∞–Ω–∂–∏—Ä–æ!');
  }
}
